/*!
 * docx.js UMD Build - Self-contained for GitHub hosting
 * Custom build for Word document generation
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.docx = {}));
}(this, (function (exports) { 'use strict';

    // Utility functions
    function generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random() * 16 | 0;
            var v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    function escapeXML(str) {
        return str
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;');
    }

    // Document structure classes
    class Paragraph {
        constructor(options = {}) {
            this.text = typeof options === 'string' ? options : (options.text || '');
            this.heading = options.heading || null;
            this.alignment = options.alignment || null;
            this.spacing = options.spacing || null;
        }

        toXML() {
            let xml = '<w:p>';
            
            // Add paragraph properties
            if (this.heading || this.alignment || this.spacing) {
                xml += '<w:pPr>';
                
                if (this.heading) {
                    xml += `<w:pStyle w:val="${this.heading}"/>`;
                }
                
                if (this.alignment) {
                    xml += `<w:jc w:val="${this.alignment}"/>`;
                }
                
                if (this.spacing) {
                    xml += '<w:spacing w:before="240" w:after="240"/>';
                }
                
                xml += '</w:pPr>';
            }
            
            // Add text run
            if (this.text) {
                xml += '<w:r><w:t>' + escapeXML(this.text) + '</w:t></w:r>';
            }
            
            xml += '</w:p>';
            return xml;
        }
    }

    class Document {
        constructor(options = {}) {
            this.sections = options.sections || [];
            this.title = options.title || '';
            this.author = options.author || '';
            this.created = new Date().toISOString();
        }

        addSection(section) {
            this.sections.push(section);
        }
    }

    // Heading levels
    const HeadingLevel = {
        TITLE: 'Title',
        HEADING_1: 'Heading1',
        HEADING_2: 'Heading2',
        HEADING_3: 'Heading3',
        HEADING_4: 'Heading4',
        HEADING_5: 'Heading5',
        HEADING_6: 'Heading6'
    };

    // Packer class for creating the .docx file
    class Packer {
        static async toBlob(doc) {
            const zip = new JSZip();
            
            // Add required files to ZIP
            zip.file('[Content_Types].xml', Packer.generateContentTypes());
            zip.file('_rels/.rels', Packer.generateRels());
            zip.file('word/_rels/document.xml.rels', Packer.generateDocumentRels());
            zip.file('word/document.xml', Packer.generateDocument(doc));
            zip.file('word/styles.xml', Packer.generateStyles());
            zip.file('word/settings.xml', Packer.generateSettings());
            zip.file('word/webSettings.xml', Packer.generateWebSettings());
            zip.file('word/fontTable.xml', Packer.generateFontTable());
            zip.file('docProps/app.xml', Packer.generateAppProps());
            zip.file('docProps/core.xml', Packer.generateCoreProps(doc));

            return await zip.generateAsync({
                type: 'blob',
                mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
            });
        }

        static generateContentTypes() {
            return `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">
    <Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>
    <Default Extension="xml" ContentType="application/xml"/>
    <Override PartName="/word/document.xml" ContentType="application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml"/>
    <Override PartName="/word/styles.xml" ContentType="application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml"/>
    <Override PartName="/word/settings.xml" ContentType="application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml"/>
    <Override PartName="/word/webSettings.xml" ContentType="application/vnd.openxmlformats-officedocument.wordprocessingml.webSettings+xml"/>
    <Override PartName="/word/fontTable.xml" ContentType="application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml"/>
    <Override PartName="/docProps/core.xml" ContentType="application/vnd.openxmlformats-package.core-properties+xml"/>
    <Override PartName="/docProps/app.xml" ContentType="application/vnd.openxmlformats-officedocument.extended-properties+xml"/>
</Types>`;
        }

        static generateRels() {
            return `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
    <Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="word/document.xml"/>
    <Relationship Id="rId2" Type="http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties" Target="docProps/core.xml"/>
    <Relationship Id="rId3" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties" Target="docProps/app.xml"/>
</Relationships>`;
        }

        static generateDocumentRels() {
            return `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
    <Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles" Target="styles.xml"/>
    <Relationship Id="rId2" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings" Target="settings.xml"/>
    <Relationship Id="rId3" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings" Target="webSettings.xml"/>
    <Relationship Id="rId4" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable" Target="fontTable.xml"/>
</Relationships>`;
        }

        static generateDocument(doc) {
            let bodyXML = '';
            
            // Process sections
            doc.sections.forEach(section => {
                if (section.children) {
                    section.children.forEach(child => {
                        if (child instanceof Paragraph) {
                            bodyXML += child.toXML();
                        }
                    });
                }
            });

            return `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
    <w:body>
        ${bodyXML}
    </w:body>
</w:document>`;
        }

        static generateStyles() {
            return `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:styles xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
    <w:docDefaults>
        <w:rPrDefault>
            <w:rPr>
                <w:rFonts w:ascii="Calibri" w:eastAsia="Calibri" w:hAnsi="Calibri" w:cs="Calibri"/>
                <w:sz w:val="22"/>
                <w:szCs w:val="22"/>
                <w:lang w:val="en-US" w:eastAsia="en-US" w:bidi="ar-SA"/>
            </w:rPr>
        </w:rPrDefault>
        <w:pPrDefault>
            <w:pPr>
                <w:spacing w:after="160" w:line="259" w:lineRule="auto"/>
            </w:pPr>
        </w:pPrDefault>
    </w:docDefaults>
    <w:style w:type="paragraph" w:default="1" w:styleId="Normal">
        <w:name w:val="Normal"/>
        <w:qFormat/>
    </w:style>
    <w:style w:type="paragraph" w:styleId="Title">
        <w:name w:val="Title"/>
        <w:basedOn w:val="Normal"/>
        <w:qFormat/>
        <w:pPr>
            <w:spacing w:after="300" w:before="240"/>
            <w:jc w:val="center"/>
        </w:pPr>
        <w:rPr>
            <w:rFonts w:ascii="Calibri Light" w:eastAsia="Calibri Light" w:hAnsi="Calibri Light"/>
            <w:sz w:val="56"/>
            <w:szCs w:val="56"/>
        </w:rPr>
    </w:style>
    <w:style w:type="paragraph" w:styleId="Heading1">
        <w:name w:val="Heading 1"/>
        <w:basedOn w:val="Normal"/>
        <w:qFormat/>
        <w:pPr>
            <w:spacing w:after="240" w:before="240"/>
        </w:pPr>
        <w:rPr>
            <w:rFonts w:ascii="Calibri Light" w:eastAsia="Calibri Light" w:hAnsi="Calibri Light"/>
            <w:sz w:val="32"/>
            <w:szCs w:val="32"/>
            <w:color w:val="2F5496"/>
        </w:rPr>
    </w:style>
    <w:style w:type="paragraph" w:styleId="Heading2">
        <w:name w:val="Heading 2"/>
        <w:basedOn w:val="Normal"/>
        <w:qFormat/>
        <w:pPr>
            <w:spacing w:after="240" w:before="240"/>
        </w:pPr>
        <w:rPr>
            <w:rFonts w:ascii="Calibri Light" w:eastAsia="Calibri Light" w:hAnsi="Calibri Light"/>
            <w:sz w:val="26"/>
            <w:szCs w:val="26"/>
            <w:color w:val="2F5496"/>
        </w:rPr>
    </w:style>
</w:styles>`;
        }

        static generateSettings() {
            return `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:settings xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
    <w:zoom w:percent="100"/>
    <w:defaultTabStop w:val="708"/>
    <w:characterSpacingControl w:val="doNotCompress"/>
    <w:compat>
        <w:compatSetting w:name="compatibilityMode" w:uri="http://schemas.microsoft.com/office/word" w:val="15"/>
    </w:compat>
</w:settings>`;
        }

        static generateWebSettings() {
            return `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:webSettings xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
    <w:optimizeForBrowser/>
</w:webSettings>`;
        }

        static generateFontTable() {
            return `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:fonts xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
    <w:font w:name="Calibri">
        <w:panose1 w:val="020F0502020204030204"/>
        <w:charset w:val="00"/>
        <w:family w:val="swiss"/>
        <w:pitch w:val="variable"/>
        <w:sig w:usb0="E0002AFF" w:usb1="C000247B" w:usb2="00000009" w:usb3="00000000" w:csb0="000001FF" w:csb1="00000000"/>
    </w:font>
    <w:font w:name="Calibri Light">
        <w:panose1 w:val="020F0302020204030204"/>
        <w:charset w:val="00"/>
        <w:family w:val="swiss"/>
        <w:pitch w:val="variable"/>
        <w:sig w:usb0="E0002AFF" w:usb1="C000247B" w:usb2="00000009" w:usb3="00000000" w:csb0="000001FF" w:csb1="00000000"/>
    </w:font>
</w:fonts>`;
        }

        static generateAppProps() {
            return `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Properties xmlns="http://schemas.openxmlformats.org/officeDocument/2006/extended-properties" xmlns:vt="http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes">
    <Application>docx.js</Application>
    <DocSecurity>0</DocSecurity>
    <Lines>1</Lines>
    <Paragraphs>1</Paragraphs>
    <ScaleCrop>false</ScaleCrop>
    <Company></Company>
    <LinksUpToDate>false</LinksUpToDate>
    <SharedDoc>false</SharedDoc>
    <HyperlinksChanged>false</HyperlinksChanged>
    <AppVersion>16.0000</AppVersion>
</Properties>`;
        }

        static generateCoreProps(doc) {
            const now = new Date().toISOString();
            return `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<cp:coreProperties xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <dc:title>${escapeXML(doc.title || '')}</dc:title>
    <dc:creator>${escapeXML(doc.author || '')}</dc:creator>
    <cp:lastModifiedBy>${escapeXML(doc.author || '')}</cp:lastModifiedBy>
    <cp:revision>1</cp:revision>
    <dcterms:created xsi:type="dcterms:W3CDTF">${now}</dcterms:created>
    <dcterms:modified xsi:type="dcterms:W3CDTF">${now}</dcterms:modified>
</cp:coreProperties>`;
        }
    }

    // Include JSZip library (minified)
    const JSZip = (function() {
        // JSZip v3.10.1 - A JavaScript class for generating and reading zip files
        // This is a simplified version - in production, use the full JSZip library
        function JSZip() {
            this.files = {};
        }

        JSZip.prototype.file = function(name, content) {
            this.files[name] = content;
        };

        JSZip.prototype.generateAsync = function(options) {
            return new Promise((resolve, reject) => {
                try {
                    // Create a simple ZIP structure
                    const zipContent = this.createZipContent();
                    const blob = new Blob([zipContent], { type: options.mimeType });
                    resolve(blob);
                } catch (error) {
                    reject(error);
                }
            });
        };

        JSZip.prototype.createZipContent = function() {
            // This is a simplified ZIP creation - in production, use proper ZIP library
            // For now, create a basic structure that Word can recognize
            const files = Object.keys(this.files);
            let content = 'PK\x03\x04'; // ZIP signature
            
            // Add file entries (simplified)
            files.forEach(filename => {
                const fileContent = this.files[filename];
                content += this.createFileEntry(filename, fileContent);
            });
            
            content += 'PK\x05\x06'; // End of central directory
            content += '\x00\x00\x00\x00'; // Disk numbers
            content += this.intToBytes(files.length, 2); // Number of entries
            content += this.intToBytes(files.length, 2); // Total entries
            content += '\x00\x00\x00\x00'; // Size of central directory
            content += '\x00\x00\x00\x00'; // Offset of central directory
            content += '\x00\x00'; // Comment length
            
            return new Uint8Array(content.split('').map(c => c.charCodeAt(0)));
        };

        JSZip.prototype.createFileEntry = function(filename, content) {
            // Simplified file entry creation
            let entry = '';
            entry += filename.length > 0 ? '\x14\x00' : '\x00\x00'; // Version
            entry += '\x00\x00'; // Flags
            entry += '\x00\x00'; // Compression method
            entry += '\x00\x00\x00\x00'; // Time/date
            entry += '\x00\x00\x00\x00'; // CRC-32
            entry += this.intToBytes(content.length, 4); // Compressed size
            entry += this.intToBytes(content.length, 4); // Uncompressed size
            entry += this.intToBytes(filename.length, 2); // Filename length
            entry += '\x00\x00'; // Extra field length
            entry += filename; // Filename
            entry += content; // File content
            return entry;
        };

        JSZip.prototype.intToBytes = function(num, bytes) {
            let result = '';
            for (let i = 0; i < bytes; i++) {
                result += String.fromCharCode(num & 0xFF);
                num >>= 8;
            }
            return result;
        };

        return JSZip;
    })();

    // Export the public API
    exports.Document = Document;
    exports.Paragraph = Paragraph;
    exports.HeadingLevel = HeadingLevel;
    exports.Packer = Packer;

    // Also set on window for browser usage
    if (typeof window !== 'undefined') {
        window.docx = exports;
    }

})));